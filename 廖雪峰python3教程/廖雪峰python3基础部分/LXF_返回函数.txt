>>> def lazy_sum(*args):
...     def sum():
...         ax = 0
...         for n in args:
...             ax = ax + n
...         return ax
...     return sum
...
>>> f = lazy_sum(1,3,5,7,9)
>>> f
<function lazy_sum.<locals>.sum at 0x000001A9E25491E0>
>>> f()
25
>>> f1 = lazy_sum(1,3,5,7,9)
>>> f2 = lazy_sum(1,3,5,7,9)
>>> f1 == f2
False
>>> f1()
25
>>> f2()
25
>>> f1() == f2()
True
>>> def count():
...     fs = []
...     for i in range(1,4):
...         def f():
...             return i * i
...         fs.append(f)
...     return fs
...
>>> f1,f2,f3 = count
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'function' object is not iterable
>>> f1,f2,f3 = count()
>>> f1()
9
>>> f2()
9
>>> f3()
9
>>> def count():
...     def f(j):
...         def g():
...             return j * j
...         return g
...     fs = []
...     for i in range(1,4):
...         fs.append(f(i))
...     return fs
...
>>> f1,f2,f3 = count()
>>> f1()
1
>>> f2()
4
>>> f3()
9
>>> f4()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'f4' is not defined
>>> f1,f2,f3,f4 = count()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: not enough values to unpack (expected 4, got 3)
>>> f1
<function count.<locals>.f.<locals>.g at 0x000001A9E2549268>
>>>