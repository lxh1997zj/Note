# -*- coding: utf-8 -*-
#1.初始值：第一个数组是 [1]
#2.常量：后续每一个数组首尾的值都是 1
#3.递进规律：下一个数组
#3.1.下一个数组的长度是前一个数组长度 + 1
#3.2.下一个数组中间数组长度（去除第一个和最后一个数）为前一个数组长度 - 1
#3.3.下一个数组中间数组 M[] 可由上一个数组 L[] 计算得出：M(x) = L(x) + L(x + 1)
#3.4.下一个数组 L = [1] + M + [1]
def triangles():
    L = [1]
    while True:
        yield L
        M = [L[x]+L[x+1] for x in range(len(L)-1)]
        L = [1] + M +[1]
# 下面是上诉规律的过渡写法
        # centerLen = len(L) - 1 # 3.2
        # M = [] # 定义下一个数组的中间数组为M
        # for x in range(centerLen):
            # M.append(L[x] + L[x + 1]) # 3.3
        # L = [1] + M + [1] # 3.4
# 期待输出:
# [1]
# [1, 1]
# [1, 2, 1]
# [1, 3, 3, 1]
# [1, 4, 6, 4, 1]
# [1, 5, 10, 10, 5, 1]
# [1, 6, 15, 20, 15, 6, 1]
# [1, 7, 21, 35, 35, 21, 7, 1]
# [1, 8, 28, 56, 70, 56, 28, 8, 1]
# [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
n = 0
results = []
for t in triangles():
    print(t)
    results.append(t)
    n = n + 1
    if n == 10:
        break
if results == [
    [1],
    [1, 1],
    [1, 2, 1],
    [1, 3, 3, 1],
    [1, 4, 6, 4, 1],
    [1, 5, 10, 10, 5, 1],
    [1, 6, 15, 20, 15, 6, 1],
    [1, 7, 21, 35, 35, 21, 7, 1],
    [1, 8, 28, 56, 70, 56, 28, 8, 1],
    [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]
]:
    print('测试通过!')
else:
    print('测试失败!')